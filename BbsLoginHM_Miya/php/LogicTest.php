<?php

require_once '/home/naokimiyasaka/public_html/mvc_board/php/Logic.php';

/**
 * Test class for Logic.
 * Generated by PHPUnit on 2012-08-27 at 14:08:17.
 */
class LogicTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Logic
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Logic;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Logic::__destruct
     * @todo Implement test__destruct().
     */
    public function test__destruct()
    {
        $this->assertTrue($this->object->__destruct());
    }

    /**
     * @covers Logic::checkErr
     * @todo Implement testCheckErr().
     */
    public function testCheckErr()
    {
        //エラーが一つ
        $this->assertEquals(1, sizeof(Logic::checkErr("ああああ", "aaa", "aaa")));
        $this->assertEquals(1, sizeof(Logic::checkErr("aaaa", "aaaaaaaaaaaaaaaaaaaaaa", "aaaa")));
        $this->assertEquals(1, sizeof(Logic::checkErr("aaaa", "aaa", "aaaaaaaaaaaaaaaaaaaaaa")));

        //エラーが二つ
        $this->assertEquals(2, sizeof(Logic::checkErr("ああああ", "aaaaaaaaaaaaaaaaaaaaaa", "aaa")));
        $this->assertEquals(2, sizeof(Logic::checkErr("ああああ", "aaa", "aaaaaaaaaaaaaaaaaaaaaa")));
        $this->assertEquals(2, sizeof(Logic::checkErr("aaaa", "aaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaa")));

        //エラーが三つ
        $this->assertEquals(3, sizeof(Logic::checkErr("ああああ", "aaaaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaaaaa")));

        //エラーがなし
        $this->assertEquals(0, sizeof(Logic::checkErr("aaa", "aaa", "aaaa")));
    }

    /**
     * @covers Logic::limitDispStr
     * @todo Implement testLimitDispStr().
     */
    public function testLimitDispStr()
    {
        $test_case1 = array( array('maintext' => 'aaaaaaaaaa') );
        $test_case2 = array( array('maintext' => 'aaaaaaaaaaaaaa') );
        $test_case3 = array( array('maintext' => 'aaa') );

        $test_case1 = Logic::limitDispStr($test_case1);
        $test_case2 = Logic::limitDispStr($test_case2);
        $test_case3 = Logic::limitDispStr($test_case3);

        $this->assertEquals("aaaaaaaaaa", $test_case1[0]['maintext']);
        $this->assertEquals("aaaaaaaaaa", $test_case2[0]['maintext']);
        $this->assertEquals("aaa", $test_case3[0]['maintext']);
    }

    /**
     * @covers Logic::checkHalf
     * @todo Implement testCheckHalf().
     */
    public function testCheckHalf()
    {
        $this->assertTrue( Logic::checkHalf("あああ") );
        $this->assertFalse( Logic::checkHalf("aaaa") );
    }

    /**
     * @covers Logic::checkStrLen
     * @todo Implement testCheckStrLen().
     */
    public function testCheckStrLen()
    {
        $this->assertTrue( Logic::checkStrLen("aaaaaaaaaaaaaaaaaaaaa", 10) );
        $this->assertFalse( Logic::checkStrLen("aaaaa", 10) );
    }
}
?>
