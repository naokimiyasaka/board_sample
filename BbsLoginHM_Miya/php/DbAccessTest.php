<?php

require_once '/home/naokimiyasaka/public_html/mvc_board/php/DbAccess.php';
require_once './Uitl.php';
require_once './Logic.php';

/**
 * Test class for DbAccess.
 * Generated by PHPUnit on 2012-08-27 at 14:07:40.
 */
class DbAccessTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var DbAccess
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new DbAccess;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers DbAccess::__destruct
     * @todo Implement test__destruct().
     */
    public function test__destruct()
    {
        $this->assertTrue( $this->object->__destruct());
    }

    /**
     * @covers DbAccess::connect
     * @todo Implement testConnect().
     */
    public function testConnect()
    {
        /*$this->markTestIncomplete(
          'This test has not been implemented yet.'
        );*/
        $this->assertEquals( $this->object->connect("localhost", "root", "aaa!!","aaaa"), DbAccess::CONNECT_ERR );
        $this->assertEquals( $this->object->connect("localhost", "root", "0okm9ijn!!","aaaaa"), DbAccess::SELECT_DB_ERR );
        $this->assertEquals( $this->object->connect("localhost", "root", "0okm9ijn!!","naokimiyasaka"), DbAccess::SUCCESS );
    }

    /**
     * @covers DbAccess::getLink
     * @todo Implement testGetLink().
     */
    public function testGetLink()
    {
        $this->assertNotNull( $this->object->getLink());
    }

    /**
     * @covers DbAccess::sqlQuery
     * @todo Implement testSqlQuery().
     */
    public function testSqlQuery()
    {
        //失敗
        $this->assertFalse($this->object->sqlQuery("select * from BOARD2"));
        //成功
        $this->assertNotEmpty($this->object->sqlQuery("select * from BOARD"));
    }

    /**
     * @covers DbAccess::getSqlContents
     * @todo Implement testGetSqlContents().
     */
    public function testGetSqlContents()
    {
        $res = mysql_query("select * from BOARD2");
        $this->assertEmpty($this->object->getSqlContents($res));
        //成功
        $res = mysql_query("select * from BOARD");
        $this->assertNotEmpty($this->object->getSqlContents($res));
    }

    /**
     * @covers DbAccess::getAllSqlContents
     * @todo Implement testGetAllSqlContents().
     */
    public function testGetAllSqlContents()
    {
        $res = mysql_query("select * from BOARD2");
        $this->assertEmpty($this->object->getAllSqlContents($res));
        //成功
        $res = mysql_query("select * from BOARD");
        $this->assertNotEmpty($this->object->getAllSqlContents($res));
    }

    /**
     * @covers DbAccess::receptionSqlDelete
     * @todo Implement testReceptionSqlDelete().
     */
    public function testReceptionSqlDelete()
    {
        $this->assertNull($this->object->receptionSqlDelete());

        //成功
        $res = mysql_query("select * from BOARD");
        $data = $this->object->getSqlContents($res);
        $_GET['id'] = $data['boardid'];
        $this->assertNotEmpty($this->object->receptionSqlDelete());
    }

    /**
     * @covers DbAccess::sqlSendDelete
     * @todo Implement testSqlSendDelete().
     */
    public function testSqlSendDelete()
    {
        $this->assertFalse( $this->object->sqlSendDelete());

        //成功
        $res = mysql_query("select * from BOARD");
        $data = $this->object->getSqlContents($res);
        $_POST['id'] = $data['boardid'];
        $this->assertTrue( $this->object->sqlSendDelete());
    }

    /**
     * @covers DbAccess::receptionSqlDetails
     * @todo Implement testReceptionSqlDetails().
     */
    public function testReceptionSqlDetails()
    {
        //エラーチェック
        $ret = $this->object->receptionSqlDetails();
        if( $ret == null ) {
            $this->assertNull($this->object->receptionSqlDetails());
        }

        //成功
        $res = mysql_query("select * from BOARD");
        $data = $this->object->getSqlContents($res);
        $_GET['id'] = $data['boardid'];
        $this->assertNotEmpty($this->object->receptionSqlDetails());
    }

    /**
     * @covers DbAccess::receptionSqlList
     * @todo Implement testReceptionSqlList().
     */
    public function testReceptionSqlList()
    {
        //エラーチェック
        $ret = $this->object->receptionSqlList();
        if( $ret == null ) {
            $this->assertNull($this->object->receptionSqlList());
        }

        //成功
        $this->assertNotEmpty($this->object->receptionSqlList());
    }

    /**
     * @covers DbAccess::receptionSqlEdit
     * @todo Implement testReceptionSqlEdit().
     */
    public function testReceptionSqlEdit()
    {
        //エラーチェック
        $this->assertEmpty($this->object->receptionSqlEdit());

        //成功
        $res = mysql_query("select * from BOARD");
        $data = $this->object->getSqlContents($res);
        $_GET['id'] = $data['boardid'];
        $this->assertNotEmpty($this->object->receptionSqlEdit());
    }

    /**
     * @covers DbAccess::sqlSendEdit
     * @todo Implement testSqlSendEdit().
     */
    public function testSqlSendEdit()
    {
        //エラーチェック
        $this->assertFalse( $this->object->sqlSendEdit());

        $insert1 = "insert into BOARD (subject, name, mail, maintext)";
        $insert2 = "value(\"testcheck\", \"testcheck\", \"testcheck\", \"testcheck\")";

        //成功
        $result = $this->object->sqlQuery(
                sprintf("%s %s", $insert1, $insert2)
            );
        //オートインクリメントの値を取得
        $res = mysql_query("SELECT LAST_INSERT_ID()");
        $dat = mysql_fetch_row($res);

        $_POST['id'] = "$dat[0]";
        $_POST['msg'] = 'testcheck';
        $this->assertTrue( $this->object->sqlSendEdit());
    }

    /**
     * @covers DbAccess::sendSqlRegist
     * @todo Implement testSendSqlRegist().
     */
    public function testSendSqlRegist()
    {
        //エラーチェック
        $this->assertFalse( $this->object->sendSqlRegist(''));

        $_POST['subject'] = 'aaaaaaaaaaaaaaa';
        $_POST['name'] = 'aaaaaaaaaaaaaaaa';
        $_POST['mail'] = 'あああああ';
        $_POST['msg'] = 'test';
        $err = array();
        $this->assertFalse( $this->object->sendSqlRegist(&$err));

        //成功
        $_POST['subject'] = 'test';
        $_POST['name'] = 'test';
        $_POST['mail'] = 'test';
        $_POST['msg'] = 'test';
        $this->assertTrue( $this->object->sendSqlRegist(&$err));
    }
}
?>
